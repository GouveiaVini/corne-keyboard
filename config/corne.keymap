/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <0 1 2 3 4 5 17 16 15 14 13 12 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <8 6 7 9 10 11 23 22 18 19 20 21 30 31 32 33 35 34 41 40 39 38 36 37>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp ESC    &kp Q                &kp W            &kp E            &kp R  &kp T        &kp Y       &kp U  &kp I             &kp O             &kp P                    &kp BSPC
&kp TAB    &HML LEFT_CONTROL A  &HML LEFT_ALT S  &HML LEFT_WIN D  &kp F  &kp G        &kp H       &kp J  &HMR RIGHT_GUI K  &HMR RIGHT_ALT L  &HMR RIGHT_CONTROL SEMI  &kp SQT
&kp LSHFT  &kp Z                &kp X            &kp C            &kp V  &kp B        &kp N       &kp M  &kp COMMA         &kp DOT           &kp FSLH                 &kp RETURN
                                                 &lt 4 LEFT_GUI   &mo 1  &kp SPACE    &kp RETURN  &mo 2  &mo 3
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&kp ESCAPE  &trans        &trans        &trans        &trans        &trans          &trans   &kp N7        &kp N8        &kp N9        &trans           &kp BSPC
&kp TAB     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_MULTIPLY  &kp KP_SUBTRACT
&kp LSHFT   &bt BT_CLR    &trans        &trans        &trans        &trans          &kp N0   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_DIVIDE    &kp KP_PLUS
                                        &kp LGUI      &trans        &kp SPACE       &kp RET  &trans        &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&kp ESCAPE  &kp EXCL    &kp AT     &kp HASH    &kp DLLR     &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY   &kp LPAR         &kp RPAR  &kp BSPC
&kp TAB     &trans      &trans     &trans      &trans       &trans       &kp MINUS  &kp EQUAL  &kp LEFT_BRACKET  &kp RBKT         &kp BSLH  &kp GRAVE
&kp LSHFT   &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &trans       &kp UNDER  &kp PLUS   &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp PIPE  &kp TILDE
                                   &kp LGUI    &trans       &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        layer_6 {
            bindings = <
&kp ESCAPE      &trans  &trans  &trans  &trans  &trans       &trans   &trans  &trans  &trans          &trans          &trans
&kp TAB         &trans  &trans  &trans  &trans  &trans       &trans   &trans  &trans  &trans          &kp UP_ARROW    &trans
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans       &trans   &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
                                &trans  &trans  &kp SPACE    &kp RET  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
